[
    {
        "text_widget_id": 1970382992,
        "text_widget_class": "CodeViewText",
        "sequence": "EditorTextCreated",
        "editor_class": "Editor",
        "time": "2018-04-11T02:21:00.613442",
        "editor_id": 1970298480
    },
    {
        "text_widget_id": 1970382992,
        "text_widget_class": "CodeViewText",
        "filename": "/home/pi/Desktop/SRTS_Code/RFID_Controller.py",
        "sequence": "Open",
        "editor_class": "Editor",
        "time": "2018-04-11T02:21:00.614624",
        "editor_id": 1970298480
    },
    {
        "text_widget_id": 1970382992,
        "text_widget_class": "CodeViewText",
        "index1": "1.0",
        "sequence": "TextDelete",
        "index2": "2.0",
        "time": "2018-04-11T02:21:00.693720"
    },
    {
        "text_widget_id": 1970382992,
        "text_widget_class": "CodeViewText",
        "index": "1.0",
        "sequence": "TextInsert",
        "time": "2018-04-11T02:21:00.716225",
        "text": "#!/usr/bin/env python\nimport time\nimport datetime\nimport serial\nimport binascii\nimport sys\n\ntime.sleep(5)\n\nfrom DB_Controller import process_scan, reset_already\nfrom MatrixController import launch_matrix\nfrom multiprocessing import Process, Queue\n\n# Open RFID Serial connection\nserialOpen = False\nwhile (not serialOpen):\n\ttry:\n\t\trfid_serial = serial.Serial(\n\t\t\tport='/dev/ttyAMA0',\n\t\t\tbaudrate = 57600,\n\t\t\tparity=serial.PARITY_NONE,\n\t\t\tstopbits=serial.STOPBITS_ONE,\n\t\t\tbytesize=serial.EIGHTBITS,\n\t\t\ttimeout=1\n\t\t)\n\t\tserialOpen = True\n\texcept:\n\t\twith open(\"error.txt\", \"a\") as errorFile:\n\t\t\te = sys.exc_info()[0]\n\t\t\terrorFile.write(\"ERROR: %s\\n\" % e)\n\n#reset the database\ntry:\n\treset_already()\nexcept:\n\twith open(\"error.txt\", \"a\") as errorFile:\n\t\te = sys.exc_info()[0]\n\t\terrorFile.write(\"ERROR: %s\\n\" % e)\n\t\t\n\n# initialize matrix\nif __name__ == '__main__':\n\tq = Queue()\n\tp = Process(target = launch_matrix, args=(q,))\n\tp.start()\n\ntime.sleep(2)\n\n# Check whether serial read RFID packet is valid\ndef is_valid_RFID_Packet(RFID_Packet):\n\tif RFID_Packet[0:6] == '1100ee':\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef extract_tag_number(RFID_Packet):\n\treturn RFID_Packet[8:32]\n\nwith open(\"out.txt\", \"a\", 0) as outFile:\n\toutFile.write(\"----------NEW INSTANCE----------------\\n\")\n\nprev_time = time.localtime()\nprev_day = prev_time.tm_yday\n\nwhile True:\n\ttry:\n\t\tcurrent_time = time.localtime()\n\t\tcurrent_day = current_time.tm_yday\n\n\t\tif (not prev_day == current_day):\n\t\t\treset_already()\n\t\t\tprev_day = current_day\n\t\t\t\n\t\n\t\t# Infinite loop to scan tags and run them against the DB\n\t\ttime.sleep(1)\n\t\tbytesToRead = rfid_serial.inWaiting()\n\t\tif (bytesToRead > 0):\n\t\t\tRFID_Packet = rfid_serial.read(18)\n\t\t\tRFID_Packet = binascii.hexlify(RFID_Packet)\n\t\t\tif is_valid_RFID_Packet(RFID_Packet):\n\t\t\t\ttag_number = extract_tag_number(RFID_Packet)\n\t\t\t\tprocess_scan(q, tag_number)\n\t\t\t\twith open(\"out.txt\", \"a\") as outFile:\n\t\t\t\t\toutFile.write(tag_number)\n\t\t\t\t\toutFile.write(\"\\n\")\n\n\t\t\trfid_serial.flushInput()\n\n\texcept:\n\t\twith open(\"error.txt\", \"a\") as errorFile:\n\t\t\te = sys.exc_info()[0]\n\t\t\terrorFile.write(\"ERROR: %s\\n\" % e)\n\n\n",
        "tags": "()"
    },
    {
        "time": "2018-04-11T02:21:00.733257",
        "view_id": 1970238544,
        "sequence": "ShowView",
        "view_class": "ShellView"
    },
    {
        "time": "2018-04-11T02:21:01.087405",
        "widget_id": 1983608624,
        "widget_class": "Workbench",
        "sequence": "<FocusIn>"
    },
    {
        "text_widget_id": 1970238992,
        "text_widget_class": "ShellText",
        "index": "1.0",
        "text_widget_context": "shell",
        "time": "2018-04-11T02:21:01.117236",
        "sequence": "TextInsert",
        "text": "Python 3.5.3 (/usr/bin/python3)",
        "tags": "('welcome',)"
    },
    {
        "text_widget_id": 1970238992,
        "text_widget_class": "ShellText",
        "index": "1.31",
        "text_widget_context": "shell",
        "time": "2018-04-11T02:21:01.119797",
        "sequence": "TextInsert",
        "text": "\n",
        "tags": "('io',)"
    },
    {
        "text_widget_id": 1970238992,
        "text_widget_class": "ShellText",
        "index": "2.0",
        "text_widget_context": "shell",
        "time": "2018-04-11T02:21:01.121900",
        "sequence": "TextInsert",
        "text": ">>> ",
        "tags": "('toplevel', 'prompt')"
    }
]